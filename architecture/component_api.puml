@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

HIDE_STEREOTYPE()

title Component diagram for Weather Forecast System - API Application

Container(web_app, "Web Application", "C#, ASP.NET Core Minimal Api, YARP Reverse Proxy", "Delivers the static content, the WFS SPA, and proxy SPA requests back to the api application.")
Container(authz, "Authorization Service", "ASP.NET Core Minimal Api", "Provides permission authorizations to the API service")

System_Ext(identity, "Duende IdentityServer", "User Auhentication and Token Issuer")

Container_Boundary(api, "API Application") {
    Component(log, "Logging Middleware", "Serilog Logging", "Structured logging for all requests using Serilog.")
    Component(auth, "JWT Bearer Authentication Middleware", "ASP.NET Core Middleware", "performs authentication by extracting and validating a JWT token from the Authorization request header.")
    Component(mediatr, "MediatR Pipeline", "", "In process messaging supports request/response, commands, queries, notifications and events.")
    Component(weather_ep, "Weather Endpoints", "ASP.NET Core Minimal Api", "Provide weather forecast management endpoints.")
    Component(data, "Infrastructure Data Component", "EF Core", "Provide database access and O/RM functionality.")
    Component(commands, "Commands Component", "MediatR Request", "Execute write commands through the MediatR pipeline.")
    Component(queries, "Queries Component", "MediatR Request", "Execute read queries through the MediatR pipeline.")
}

Rel_R(weather_ep, mediatr, "Send Request")
Rel(mediatr, commands, "Execute")
Rel(mediatr, queries, "Execute")
Rel(commands, data, "Uses")
Rel(queries, data, "Uses")

Rel(weather_ep, authz, "Authorize", "JSON/HTTPS")
Rel(auth, identity, "Validate Token", "HTTPS")
Rel(auth, weather_ep, "/weather")
Rel_R(web_app, log, "Proxy", "JSON/HTTPS")
Rel_L(log, auth, "Forward Request")

@enduml